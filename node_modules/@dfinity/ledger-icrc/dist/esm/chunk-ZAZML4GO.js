import{a as A}from"./chunk-6GLYJI63.js";import{a as y,b as P}from"./chunk-42OX77TJ.js";import{createServices as B}from"@dfinity/utils";var F=({IDL:t})=>{let c=t.Rec(),n=t.Record({ledger_id:t.Opt(t.Principal),retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),a=t.Record({ledger_id:t.Principal,retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),o=t.Variant({Upgrade:n,Init:a}),r=t.Nat,s=t.Vec(t.Nat8),e=t.Record({owner:t.Principal,subaccount:t.Opt(s)}),p=t.Record({max_results:t.Nat,start:t.Opt(r),account:e}),i=t.Nat,d=t.Record({from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),l=t.Record({to:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}),_=t.Record({fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,expected_allowance:t.Opt(t.Nat),expires_at:t.Opt(t.Nat64),spender:e}),u=t.Record({to:e,fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),m=t.Record({burn:t.Opt(d),kind:t.Text,mint:t.Opt(l),approve:t.Opt(_),timestamp:t.Nat64,transfer:t.Opt(u)}),g=t.Record({id:r,transaction:m}),N=t.Record({balance:i,transactions:t.Vec(g),oldest_tx_id:t.Opt(r)}),O=t.Record({message:t.Text}),R=t.Variant({Ok:N,Err:O}),f=t.Record({start:t.Nat,length:t.Nat}),x=t.Vec(t.Tuple(t.Text,c));c.fill(t.Variant({Int:t.Int,Map:x,Nat:t.Nat,Nat64:t.Nat64,Blob:t.Vec(t.Nat8),Text:t.Text,Array:t.Vec(c)}));let T=c,V=t.Record({blocks:t.Vec(T),chain_length:t.Nat64}),b=t.Record({ranges:t.Vec(t.Tuple(e,t.Vec(t.Tuple(r,r))))}),k=t.Record({owner:t.Principal,start:t.Opt(s)}),v=t.Record({num_blocks_synced:r});return t.Service({get_account_transactions:t.Func([p],[R],[]),get_blocks:t.Func([f],[V],[]),get_fee_collectors_ranges:t.Func([],[b],[]),icrc1_balance_of:t.Func([e],[i],[]),ledger_id:t.Func([],[t.Principal],[]),list_subaccounts:t.Func([k],[t.Vec(s)],[]),status:t.Func([],[v],[])})};var G=({IDL:t})=>{let c=t.Rec(),n=t.Record({ledger_id:t.Opt(t.Principal),retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),a=t.Record({ledger_id:t.Principal,retrieve_blocks_from_ledger_interval_seconds:t.Opt(t.Nat64)}),o=t.Variant({Upgrade:n,Init:a}),r=t.Nat,s=t.Vec(t.Nat8),e=t.Record({owner:t.Principal,subaccount:t.Opt(s)}),p=t.Record({max_results:t.Nat,start:t.Opt(r),account:e}),i=t.Nat,d=t.Record({from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),l=t.Record({to:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}),_=t.Record({fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,expected_allowance:t.Opt(t.Nat),expires_at:t.Opt(t.Nat64),spender:e}),u=t.Record({to:e,fee:t.Opt(t.Nat),from:e,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat,spender:t.Opt(e)}),m=t.Record({burn:t.Opt(d),kind:t.Text,mint:t.Opt(l),approve:t.Opt(_),timestamp:t.Nat64,transfer:t.Opt(u)}),g=t.Record({id:r,transaction:m}),N=t.Record({balance:i,transactions:t.Vec(g),oldest_tx_id:t.Opt(r)}),O=t.Record({message:t.Text}),R=t.Variant({Ok:N,Err:O}),f=t.Record({start:t.Nat,length:t.Nat}),x=t.Vec(t.Tuple(t.Text,c));c.fill(t.Variant({Int:t.Int,Map:x,Nat:t.Nat,Nat64:t.Nat64,Blob:t.Vec(t.Nat8),Text:t.Text,Array:t.Vec(c)}));let T=c,V=t.Record({blocks:t.Vec(T),chain_length:t.Nat64}),b=t.Record({ranges:t.Vec(t.Tuple(e,t.Vec(t.Tuple(r,r))))}),k=t.Record({owner:t.Principal,start:t.Opt(s)}),v=t.Record({num_blocks_synced:r});return t.Service({get_account_transactions:t.Func([p],[R],["query"]),get_blocks:t.Func([f],[V],["query"]),get_fee_collectors_ranges:t.Func([],[b],["query"]),icrc1_balance_of:t.Func([e],[i],["query"]),ledger_id:t.Func([],[t.Principal],["query"]),list_subaccounts:t.Func([k],[t.Vec(s)],["query"]),status:t.Func([],[v],["query"])})};var S=class t extends A{constructor(){super(...arguments);this.getTransactions=async({certified:n,...a})=>{let o=await this.caller({certified:n}).get_account_transactions(y(a));if("Err"in o)throw new P(o.Err.message);return o.Ok};this.ledgerId=n=>{let{ledger_id:a}=this.caller(n);return a()}}static create(n){let{service:a,certifiedService:o,canisterId:r}=B({options:n,idlFactory:G,certifiedIdlFactory:F});return new t(r,a,o)}};export{S as a};
//# sourceMappingURL=chunk-ZAZML4GO.js.map
