import type { Agent, Identity } from "@dfinity/agent";
import { HttpAgent } from "@dfinity/agent";
/**
 * Get a default agent that connects to mainnet with the anonymous identity.
 * @returns The default agent to use
 */
export declare const defaultAgent: () => Agent;
/**
 * Create an agent for a given identity
 * @param identity A mandatory identity to use for the agent
 * @param host An optional host to connect to
 * @param fetchRootKey Fetch root key for certificate validation during local development or on testnet
 * @param verifyQuerySignatures Check for signatures in the state tree signed by the node that replies to queries - i.e. certify responses.
 * @param retryTimes Set the number of retries the agent should perform before errorring.
 */
export declare const createAgent: ({ identity, host, fetchRootKey, verifyQuerySignatures, retryTimes, }: {
    identity: Identity;
    host?: string;
    fetchRootKey?: boolean;
    verifyQuerySignatures?: boolean;
    retryTimes?: number;
}) => Promise<HttpAgent>;
